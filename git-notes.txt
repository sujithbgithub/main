urdu 6:33 pm



04f393c4


- [Narrator] In this movie, we'll gain an understanding of the HEAD Pointer in Git. Git maintains a reference variable called HEAD. All capitals, H-E-A-D. We call this variable a pointer, because its purpose is to reference, or point to, a specific commit in the repository. As we make new commits, the pointer changes, or moves, to point to a new commit. The HEAD always points to the tip of the current branch in our repository. Now the repository has nothing to do with the staging index or the working directory. It's a way of tracking the current position in the repository. I think a good metaphor to use for the HEAD, is the playback and record head on a cassette tape recorder. As we start recording audio, the tape moves past the head, and it records onto it. When we press stop, the place where that record head is stopped, is the place that it will start recording again, if we press record a second time. Now we can move around, we can move the head to different places, we can fast forward and rewind, but wherever the head is positioned when we hit record again, that's where it's going to start recording. The HEAD pointer in Git is very similar. It points to the place where we're going to start recording next. It's the place where we left off in our repository with what we've committed. Let's take a look at some illustrations that will make this clear. In the last movie, we saw how we could refer to them using the SHA values. Those 40-character unique values that are tied to these snapshots. I want to distill this down, just to make the illustration simpler. I'm just going to use the first six characters of each one of those SHAs. So here you can see the same SHAs linked together as a series of commits. Now, can you guess where the HEAD points to after we've made these three commits? It points to the tip of the current branch in our repository. That's the last commit that we made. It's the parent of the next commit that we make. So we make another commit, it'll be attached to the end there, after a614b5. That'll become the parent. The HEAD becomes especially important, when we start talking about branches. Branches is a more advanced subject we'll talk about later on, but I wanted to just give you the basics here. By default, the branch we're working on is called the master branch, and that's our main branch. So let's walk through the master branch and see how the HEAD pointer moves as we make our commits. We start with our first commit 5c15e8. At the start, the HEAD pointer points to that commit. Then when we make a new commit, it says "oh the parent is going to be 5c15e8?" It runs it all through the hash algorithm, it creates a new commit with a new SHA, and it moves the HEAD pointer to point to that last commit. That's now the tip of our master branch. And then when we make another one, it does the same thing, and moves the head pointer again. It's like it moved the record head of that tape recorder in our metaphor. In Git we have the ability to create new branches, that is to create a new set of code from what we're working on, and it's going to be separate from our master branch. We'll learn how to do that later on. But for now, let's just say that we have a new branch, and that new branch is going to start moving and have its own commits. When we make the first commit, the HEAD moves to that commit. And then when we make another commit, then the HEAD moves to that one. And so on. And of course we have the ability then to move the HEAD back and forth to different branches, so that we can write on different branches, depending on where the head is located. Now Git will keep track of moving the HEAD around for you. It's not something that you need to worry about. But I do just want to show you where it exists. You remember that inside our project folder, we have that directory that's called .Git. Inside there, you'll see that there's a file called HEAD, in all capitals. It's just a simple file, let's take a look at what's inside it. Git/HEAD, and you'll see, it says, ref : refs/heads/master. What this is doing is it's telling it that it can find this information in this refs directory. So let's take a look at what's in there. Let's do cat .Git, and then let's type in refs/heads/master, just like it suggests. And look what it comes out with. It gives us a SHA value. What is that SHA value? Let's call Git log, and let's look at our first commit. Look at that, it exactly matches. So it's keeping track of the HEAD right here in this file, it says look to this other file, refs/heads/master, in order to know what it points to, if we switched branches, then the HEAD would point to a tip of a different branch. Right? So it's saying, right now, it's set to the master branch and the master branch is pointing at this SHA. And there's our SHA, right there. You can also see that Git tells us right here in the log, that the HEAD is pointing at master right now. So again, most of the time, you will not need to actually manipulate the HEAD yourself. Git will take care of that for you. But it is useful to know about the concept, and to understand what git is doing for you. 



HEAD :-

a reference variable
We call this variable a pointer, because its purpose is to reference, or point to, a specific commit in the repository
As we make new commits, the pointer changes, or moves, to point to a new commit
It's a way of tracking the current position in the repository.
It points to the tip of the current branch in our repository


BRANCH :-

Branches is to create a new set of code from what we're working on, and it's going to be separate from our master branch.